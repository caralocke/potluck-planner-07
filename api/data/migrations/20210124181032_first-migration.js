exports.up = async (knex) => {
  await knex.schema
    .createTable('users', (users) => {
      users.increments('user_id')
      users.string('username', 200).notNullable().unique()
      users.string('password', 200).notNullable()
      users.string('name').notNullable()
      users.string('email').notNullable()
    })
    .createTable('events', (table) => {
      table.increments('event_id')
      table.integer('organizer_id')
            .unsigned()
            .notNullable()
            .references('user_id')
            .inTable('users')
            .onUpdate('CASCADE')
            .onDelete('CASCADE')
      table.string('title', 128).notNullable()
      table.string('description', 250)
      table.date('date').notNullable()
      table.time('time').notNullable()
      table.string('location').notNullable()
    })
    .createTable('guests', (table) => {
      table.increments('guest_id')
      table.integer('user_id')
           .unsigned()
           .notNullable()
           .references('user_id')
           .inTable('users')
           .onDelete('CASCADE')
           .onUpdate('CASCADE')
      table.integer('event_id')
           .unsigned()
           .notNullable()
           .references('event_id')
           .inTable('events')
           .onDelete('CASCADE')
           .onUpdate('CASCADE')
      table.boolean('attending')
           .notNullable()
           .defaultTo(false)
    })
}

exports.down = async (knex) => {
  await knex.schema.dropTableIfExists('guests')
  await knex.schema.dropTableIfExists('events')
  await knex.schema.dropTableIfExists('users')
}
